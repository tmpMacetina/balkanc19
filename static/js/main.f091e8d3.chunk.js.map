{"version":3,"sources":["assets/WBalkans.png","Graph.js","GraphSmall.js","GraphLarge.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","props","filteredData","className","BarChart","width","height","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","type","domain","Tooltip","Legend","wrapperStyle","position","Bar","fill","name","GraphSmall","GraphLarge","App","useState","apiData","setApiData","setFilteredData","loading","setLoading","dataError","setDataError","arrayOfFilteredData","getData","a","axios","get","response","useEffect","forEach","item","push","code","todayDeaths","today","deaths","todayConfirmed","confirmed","totalDeaths","latest_data","totalConfirmed","totalRecovered","recovered","deathRate","parseFloat","calculated","death_rate","toFixed","perMillion","cases_per_million_population","style","backgroundImage","backgroundImg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f091e8d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/WBalkans.515828ff.png\";","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport {\r\n  BarChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Bar\r\n} from \"recharts\";\r\nimport \"./App.scss\";\r\nimport \"./Graph.scss\";\r\n\r\nconst Graph = props => {\r\n  const { filteredData } = props;\r\n  return (\r\n    <div className=\"graph-container\">\r\n      {\" \"}\r\n      <div className=\"graph\">\r\n        <h1>Today&apos;s data*</h1>\r\n        <BarChart width={800} height={300} data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" domain={[0, 6000]} />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ position: \"relative\" }} />\r\n          <Bar dataKey=\"todayConfirmed\" fill=\"#1b78e3\" name=\"Confirmed cases\" />\r\n          <Bar dataKey=\"todayDeaths\" fill=\"#e31b1b\" name=\"Deaths \" />\r\n        </BarChart>\r\n      </div>\r\n      <div className=\"graph\">\r\n        <div className=\"graphbg\">\r\n          {\" \"}\r\n          <h1>Total cases and recovered</h1>\r\n          <BarChart width={800} height={300} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            {/* ticks={[\"Albanija\",\"BiH\",\"Hrvatska\",\"Srbija\",\"Crna Gora\",\"S.Makedonija\"]} */}\r\n            {/* <YAxis type=\"number\" domain={[0, \"dataMax\"]} /> */}\r\n            <YAxis type=\"number\" domain={[0, 800000]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar\r\n              dataKey=\"totalConfirmed\"\r\n              name=\"Confirmed cases\"\r\n              fill=\"#1b78e3\"\r\n            />\r\n            <Bar\r\n              dataKey=\"totalRecovered\"\r\n              name=\"Number of recovered\"\r\n              fill=\"#82ca9d\"\r\n            />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph\">\r\n        <div className=\"graphbg\">\r\n          <h1>Number of cases per 1.000.000* </h1>\r\n          <BarChart width={800} height={300} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis type=\"number\" domain={[0, 400]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar dataKey=\"perMillion\" fill=\"#1b78e3\" name=\"Cases per 1M\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph\">\r\n        <div className=\"graphbg\">\r\n          <h1>Total Deaths</h1>\r\n          <BarChart width={800} height={300} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis type=\"number\" domain={[0, 8000]} />\r\n            {/* <YAxis type=\"number\" domain={[0, \"dataMax\"]} /> */}\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar dataKey=\"totalDeaths\" fill=\"#e31b1b\" name=\"Total deaths\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph\">\r\n        <div className=\"graphbg\">\r\n          <h1>Death rate in %</h1>\r\n          <BarChart width={800} height={300} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis type=\"number\" domain={[0, 5]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar dataKey=\"deathRate\" fill=\"#e31b1b\" name=\"Death rate in %\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport {\r\n  BarChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Bar\r\n} from \"recharts\";\r\nimport \"./Graph.scss\";\r\n\r\nconst GraphSmall = props => {\r\n  const { filteredData } = props;\r\n  return (\r\n    <div className=\"graph-container-s\">\r\n      <div className=\"graph-s\">\r\n        <div className=\"graphbg-s\">\r\n          <h1 className=\"subtitle-s\">Todays data*</h1>\r\n          <BarChart width={300} height={220} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"code\" />\r\n            <YAxis type=\"number\" domain={[0, 8000]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar\r\n              dataKey=\"todayConfirmed\"\r\n              fill=\"#1b78e3\"\r\n              name=\"Confirmed cases\"\r\n            />\r\n            <Bar dataKey=\"todayDeaths\" fill=\"#e31b1b\" name=\"Deaths \" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph-s\">\r\n        <div className=\"graphbg-s\">\r\n          {\" \"}\r\n          <h1 className=\"subtitle-s\">Total cases and recovered</h1>\r\n          <BarChart width={300} height={220} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"code\" />\r\n            <YAxis type=\"number\" domain={[0, 800000]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar\r\n              dataKey=\"totalConfirmed\"\r\n              name=\"Confirmed cases\"\r\n              fill=\"#1b78e3\"\r\n            />\r\n            <Bar\r\n              dataKey=\"totalRecovered\"\r\n              name=\"Number of recovered\"\r\n              fill=\"#82ca9d\"\r\n            />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph-s\">\r\n        <div className=\"graphbg-s\">\r\n          <h1 className=\"subtitle-s\">Number of cases per 1.000.000* </h1>\r\n          <BarChart width={300} height={200} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"code\" />\r\n            <YAxis type=\"number\" domain={[0, 400]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar dataKey=\"perMillion\" fill=\"#1b78e3\" name=\"Cases per 1M\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph-s\">\r\n        <div className=\"graphbg-s\">\r\n          <h1 className=\"subtitle-s\">Total Deaths</h1>\r\n          <BarChart width={300} height={220} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"code\" />\r\n            <YAxis type=\"number\" domain={[0, 8000]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar dataKey=\"totalDeaths\" fill=\"#e31b1b\" name=\"Total deaths\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n      <div className=\"graph-s\">\r\n        <div className=\"graphbg-s\">\r\n          <h1 className=\"subtitle-s\">Death rate in %</h1>\r\n          <BarChart width={300} height={220} data={filteredData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"code\" />\r\n            <YAxis type=\"number\" domain={[0, 5]} />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ position: \"relative\" }} />\r\n            <Bar dataKey=\"deathRate\" fill=\"#e31b1b\" name=\"Death rate in %\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphSmall;\r\n","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport {\r\n  BarChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Bar\r\n} from \"recharts\";\r\n\r\nconst GraphLarge = props => {\r\n  const { filteredData } = props;\r\n  return (\r\n    <div className=\"graph-container-l\">\r\n      {\" \"}\r\n      <div className=\"graph-l\">\r\n        <h1>Today&apos;s data*</h1>\r\n        <BarChart width={1200} height={500} data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" domain={[0, 6000]} />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ position: \"relative\" }} />\r\n          <Bar dataKey=\"todayConfirmed\" fill=\"#1b78e3\" name=\"Confirmed cases\" />\r\n          <Bar dataKey=\"todayDeaths\" fill=\"#e31b1b\" name=\"Deaths \" />\r\n        </BarChart>\r\n      </div>\r\n      <div className=\"graph-l\">\r\n        <h1>Total cases and recovered</h1>\r\n        <BarChart width={1200} height={500} data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          {/* ticks={[\"Albanija\",\"BiH\",\"Hrvatska\",\"Srbija\",\"Crna Gora\",\"S.Makedonija\"]} */}\r\n          {/* <YAxis type=\"number\" domain={[0, \"dataMax\"]} /> */}\r\n          <YAxis type=\"number\" domain={[0, 800000]} />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ position: \"relative\" }} />\r\n          <Bar dataKey=\"totalConfirmed\" name=\"Confirmed cases\" fill=\"#1b78e3\" />\r\n          <Bar\r\n            dataKey=\"totalRecovered\"\r\n            name=\"Number of recovered\"\r\n            fill=\"#82ca9d\"\r\n          />\r\n        </BarChart>\r\n      </div>\r\n      <div className=\"graph-l\">\r\n        <h1>Number of cases per 1.000.000* </h1>\r\n        <BarChart width={1200} height={500} data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" domain={[0, 400]} />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ position: \"relative\" }} />\r\n          <Bar dataKey=\"perMillion\" fill=\"#1b78e3\" name=\"Cases per 1M\" />\r\n        </BarChart>\r\n      </div>\r\n      <div className=\"graph-l\">\r\n        <h1>Total Deaths</h1>\r\n        <BarChart width={1200} height={500} data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" domain={[0, 8000]} />\r\n          {/* <YAxis type=\"number\" domain={[0, \"dataMax\"]} /> */}\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ position: \"relative\" }} />\r\n          <Bar dataKey=\"totalDeaths\" fill=\"#e31b1b\" name=\"Total deaths\" />\r\n        </BarChart>\r\n      </div>\r\n      <div className=\"graph-l\">\r\n        <h1>Death rate in %</h1>\r\n        <BarChart width={1200} height={500} data={filteredData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" domain={[0, 5]} />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ position: \"relative\" }} />\r\n          <Bar dataKey=\"deathRate\" fill=\"#e31b1b\" name=\"Death rate in %\" />\r\n        </BarChart>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphLarge;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport axios from \"axios\";\nimport \"./App.scss\";\nimport backgroundImg from \"./assets/WBalkans.png\";\nimport Graph from \"./Graph\";\nimport GraphSmall from \"./GraphSmall\";\nimport GraphLarge from \"./GraphLarge\";\n\nconst App = () => {\n  const [apiData, setApiData] = useState(null);\n  const [filteredData, setFilteredData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [dataError, setDataError] = useState(false);\n  const arrayOfFilteredData = [];\n\n  const getData = async () => {\n    try {\n      const response = await axios.get(\"https://corona-api.com/countries\");\n      setApiData(response);\n      setLoading(false);\n    } catch (error) {\n      setDataError(true);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (apiData != null) {\n      const fdata = apiData.data.data;\n      fdata.forEach(item => {\n        if (\n          item.name === \"Albania\" ||\n          item.name === \"Bosnia and Herzegovina\" ||\n          item.name === \"Serbia\" ||\n          item.name === \"Montenegro\" ||\n          item.name === \"North Macedonia\"\n        )\n          arrayOfFilteredData.push({\n            name: item.name,\n            code: item.code,\n            todayDeaths: item.today.deaths,\n            todayConfirmed: item.today.confirmed,\n            totalDeaths: item.latest_data.deaths,\n            totalConfirmed: item.latest_data.confirmed,\n            totalRecovered: item.latest_data.recovered,\n            deathRate: parseFloat(\n              item.latest_data.calculated.death_rate.toFixed(3)\n            ),\n            perMillion: item.latest_data.calculated.cases_per_million_population\n          });\n      });\n      setFilteredData(arrayOfFilteredData);\n    }\n  }, [apiData]);\n\n  return (\n    <>\n      <div className=\"App\">\n        <div\n          className=\"background\"\n          style={{ backgroundImage: `url('${backgroundImg}')` }}\n        />\n        {dataError ? <h1>ERROR</h1> : null}\n        <h1 className=\"title\">Western Balkans COVID-19 data</h1>\n        {loading ? (\n          <div className=\"loader\">Loading...</div>\n        ) : (\n          <div>\n            <Graph filteredData={filteredData} />\n            <GraphSmall filteredData={filteredData} />\n            <GraphLarge filteredData={filteredData} />\n          </div>\n        )}\n      </div>\n      <div className=\"footer\">\n        <p className=\"msg\">\n          All data is provided by: https://corona-api.com/countries{\" \"}\n        </p>\n        <p className=\"msg\">\n          0 represents lack of data, data updates at 3 p.m. CET +1 *\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}